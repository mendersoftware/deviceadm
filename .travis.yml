language: go

# Forces travis to use VM insted container, required to be able to build containers.
sudo: required

services:
    - docker
    - mongodb

addons:
  apt:
    packages:
      - "python3"
      - "python3-pip"

# Golang version matrix
go:
    - 1.8

env:
    global:
        # Should be encrypted or set as private travis variables (in travis settings):
        # AWS_ACCESS_KEY_ID
        # AWS_SECRET_ACCESS_KEY
        # DOCKER_HUB_EMAIL
        # DOCKER_HUB_USERNAME
        # DOCKER_HUB_PASSWORD

        # AWS S3 bucket name, to store updated docs
        - AWS_BUCKET_DOCS=mender-docs

        # AWS region.
        # Can be overridden by travis private variable set in travis settings: AWS_REGION_OVERRIDE
        - AWS_REGION=eu-west-1

        # Docker repository name
        - DOCKER_REPOSITORY="mendersoftware/deviceadm"

        # Use correct branch for testing
        - TEST_BRANCH=$TRAVIS_BRANCH

jobs:
    include:
    - stage: Static code checks
      install:
        - sudo apt-get -qq update
        # Install code coverage tooling
        - go get -u github.com/axw/gocov/gocov
        - go get -u golang.org/x/tools/cmd/cover

        # Install cyclomatic dependency analysis tool
        - go get -u github.com/fzipp/gocyclo

        - sudo apt-get -qq install -y e2tools
        - npm install -g swagger-cli

        # Get our own Swagger verifier
        - wget https://raw.githubusercontent.com/mendersoftware/autodocs/master/verify_docs.py

      script:
        # Rename the branch we're on, so that it's not in the way for the
        # subsequent fetch. It's ok if this fails, it just means we're not on any
        # branch.
        - git branch -m temp-branch || true
        # Git trick: Fetch directly into our local branches instead of remote
        # branches.
        - git fetch origin 'refs/heads/*:refs/heads/*'
        # Get last remaining tags, if any.
        - git fetch --tags origin

        # Test if code was formatted with 'go fmt'
        # Command will format code and return modified files
        # fail if any have been modified.
        - if [ -n "$(go fmt)" ]; then echo 'Code is not formatted with "go fmt"'; false; fi

        # Perform static code analysys
        - go vet `go list ./... | grep -v vendor`

        # Fail builds when the cyclomatic complexity reaches 15 or more
        - gocyclo -over 15 `find . -iname '*.go' | grep -v 'vendor' | grep -v '_test.go'`

        # Verify that the Swagger docs are valid
        - swagger-cli validate docs/*.yml

        # Verify that the Swagger docs follow the autodeployment requirements
        - if test "$(ls -A docs)"; then python2.7 verify_docs.py `find docs -name "*.yml"`; fi

    - stage: Tests
      name: "unit"
      script:
        - go list ./... | grep -v vendor | xargs -n1 -I {} -P 4 go test -v -covermode=atomic -coverprofile=../../../{}/coverage.txt {} || exit $? ;

      after_success:
        - bash <(curl -s https://codecov.io/bash) -F unittests ;

    - stage: Tests
      name: "acceptance"
      script:
        - git clone -b master https://github.com/mendersoftware/integration.git;
        - mv integration/extra/travis-testing/* tests/ ;
        - CGO_ENABLED=0 go test -c -o deviceadm-test -coverpkg $(go list ./... | grep -v vendor | grep -v mocks | grep -v test | tr  '\n' ,);
        - sudo docker build -f Dockerfile.acceptance-testing -t mendersoftware/deviceadm:prtest .;
        - CGO_ENABLED=0 go build;
        - ./tests/build-acceptance ./tests ./docs/management_api.yml ./docs/internal_api.yml ./deviceadm;
        - TESTS_DIR=$PWD/tests ./tests/run-test-environment "acceptance" $PWD/integration ./tests/docker-compose-acceptance.yml && TESTS_DIR=$PWD/tests ./tests/run-test-environment "acceptance" $PWD/integration ./tests/docker-compose-acceptance-mt.yml;
      after_success:
        - bash <(curl -s https://codecov.io/bash) -F acceptance ;

    - stage: Tests
      name: "backend-integration"
      install:
        - sudo apt-get -qq update
        - pip3 install -U --user PyYAML
      script:
        - git clone -b master https://github.com/mendersoftware/integration.git;

        - CGO_ENABLED=0 go build;
        - sudo docker build -t mendersoftware/useradm:pr .;

        - ./integration/extra/release_tool.py --set-version-of mender-device-adm --version pr;
        - PYTEST_ARGS="-k 'not Multitenant'" ./integration/backend-tests/run;

    - stage: Trigger integration
      script:
        - echo "TODO trigger jenkins integration tests"

    - stage: Build and publish
      name: "dockerhub"
      if: type = push
      install: skip
      script:
        - CGO_ENABLED=0 go build -ldflags "-X main.Commit=`echo $TRAVIS_COMMIT` -X main.Tag=`echo $TRAVIS_TAG` -X main.Branch=`echo $TRAVIS_BRANCH` -X main.BuildNumber=`echo $TRAVIS_BUILD_NUMBER`" ;
        - sudo docker build -t $DOCKER_REPOSITORY:pr . ;
        - if [ ! -z "$TRAVIS_TAG" ]; then export IMAGE_TAG=$TRAVIS_TAG; else export IMAGE_TAG=$TRAVIS_BRANCH; fi ;
        - docker tag $DOCKER_REPOSITORY:pr $DOCKER_REPOSITORY:$IMAGE_TAG ;
        - docker login --username=$DOCKER_HUB_USERNAME --password=$DOCKER_HUB_PASSWORD ;
        - docker push $DOCKER_REPOSITORY:$IMAGE_TAG ;

        - if [ "$TRAVIS_BRANCH" = master ]; then
            export COMMIT_TAG="$TRAVIS_BRANCH"_"$TRAVIS_COMMIT";
            docker tag $DOCKER_REPOSITORY:pr $DOCKER_REPOSITORY:$COMMIT_TAG;
            docker push $DOCKER_REPOSITORY:$COMMIT_TAG;
          fi;

    - stage: Build and publish
      name: "docs"
      if: type = push
      install: skip
      script: skip
      deploy:
        -
          provider: s3
          access_key_id: $AWS_ACCESS_KEY_ID
          secret_access_key: $AWS_SECRET_ACCESS_KEY
          bucket: $AWS_BUCKET_DOCS
          region: $AWS_REGION
          upload-dir: $TRAVIS_REPO_SLUG/latest/$TRAVIS_BRANCH
          local_dir: docs
          skip_cleanup: true
          acl: public_read
          on:
            repo: $TRAVIS_REPO_SLUG
            all_branches: true

before_script:
    # Print build info that binary is compiled with.
    - echo $TRAVIS_COMMIT
    - echo $TRAVIS_TAG
    - echo $TRAVIS_BRANCH
    - echo $TRAVIS_BUILD_NUMBER
    - echo $TRAVIS_REPO_SLUG
